package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"
	"github.com/99designs/gqlgen/graphql"
	"github.com/jpdel518/go-graphql-gateway/gateway/controllers"
	"github.com/jpdel518/go-graphql-gateway/gateway/graph/model"
	"github.com/jpdel518/go-graphql-gateway/gateway/internal"
	"strconv"
)

// Users is the resolver for the users field.
func (r *groupResolver) Users(ctx context.Context, obj *model.Group) ([]*model.User, error) {
	// グループに所属するユーザー一覧取得
	return controllers.NewUserController().FetchByGroup(ctx, obj)
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.NewGroup) (*model.Group, error) {
	// グループ作成
	return controllers.NewGroupController().Store(ctx, input)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, firstName string, lastName string, age *int, address string, email string, groupID int, avatar *graphql.Upload) (*model.User, error) {
	// ユーザー作成
	return controllers.NewUserController().Store(ctx, firstName, lastName, age, address, email, groupID, avatar)
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context, name *string, offset *int, limit *int, sort *int) ([]*model.Group, error) {
	// グループ一覧取得
	return controllers.NewGroupController().Fetch(ctx, name, offset, limit, sort)
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*model.Group, error) {
	// グループ取得
	return controllers.NewGroupController().Get(ctx, &id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, name *string, offset *int, limit *int, sort *int) ([]*model.User, error) {
	// ユーザー一覧取得
	return controllers.NewUserController().Fetch(ctx, name, offset, limit, sort)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	// ユーザー取得
	panic(fmt.Errorf("not implemented: User - user"))
}

// Group is the resolver for the group field.
func (r *userResolver) Group(ctx context.Context, obj *model.User) (*model.Group, error) {
	// ユーザー所属グループ取得
	groupID := strconv.Itoa(obj.GroupID)
	return controllers.NewGroupController().Get(ctx, &groupID)
}

// Group returns internal.GroupResolver implementation.
func (r *Resolver) Group() internal.GroupResolver { return &groupResolver{r} }

// Mutation returns internal.MutationResolver implementation.
func (r *Resolver) Mutation() internal.MutationResolver { return &mutationResolver{r} }

// Query returns internal.QueryResolver implementation.
func (r *Resolver) Query() internal.QueryResolver { return &queryResolver{r} }

// User returns internal.UserResolver implementation.
func (r *Resolver) User() internal.UserResolver { return &userResolver{r} }

type groupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
